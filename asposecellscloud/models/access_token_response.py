# coding: utf-8

"""
<copyright company="Aspose" file="access_token_responsepy.cs">
  Copyright (c) 2025 Aspose.Cells Cloud
</copyright>
<summary>
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
</summary>
"""

from pprint import pformat
from six import iteritems
import re


class AccessTokenResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expires': 'str',
        'access_token': 'str',
        'issued': 'str',
        'client_refresh_token_life_time_in_minutes': 'str',
        'expires_in': 'int',
        'token_type': 'str',
        'client_id': 'str',
        'refresh_token': 'str'
    }

    attribute_map = {
        'expires': 'expires',
        'access_token': 'access_token',
        'issued': 'issued',
        'client_refresh_token_life_time_in_minutes': 'clientRefreshTokenLifeTimeInMinutes',
        'expires_in': 'expires_in',
        'token_type': 'token_type',
        'client_id': 'client_id',
        'refresh_token': 'refresh_token'
    }

    @staticmethod
    def get_swagger_types():
        return AccessTokenResponse.swagger_types

    @staticmethod
    def get_attribute_map():
        return AccessTokenResponse.attribute_map

    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, expires=None, access_token=None, issued=None, client_refresh_token_life_time_in_minutes=None, expires_in=None, token_type=None, client_id=None, refresh_token=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}

        """
        AccessTokenResponse - a model defined in Swagger
        """

        self.container['expires'] = None
        self.container['access_token'] = None
        self.container['issued'] = None
        self.container['client_refresh_token_life_time_in_minutes'] = None
        self.container['expires_in'] = None
        self.container['token_type'] = None
        self.container['client_id'] = None
        self.container['refresh_token'] = None

        if expires is not None:
          self.expires = expires
        if access_token is not None:
          self.access_token = access_token
        if issued is not None:
          self.issued = issued
        if client_refresh_token_life_time_in_minutes is not None:
          self.client_refresh_token_life_time_in_minutes = client_refresh_token_life_time_in_minutes
        if expires_in is not None:
          self.expires_in = expires_in
        if token_type is not None:
          self.token_type = token_type
        if client_id is not None:
          self.client_id = client_id
        if refresh_token is not None:
          self.refresh_token = refresh_token

    @property
    def expires(self):
        """
        Gets the expires of this AccessTokenResponse.

        :return: The expires of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['expires']

    @expires.setter
    def expires(self, expires):
        """
        Sets the expires of this AccessTokenResponse.

        :param expires: The expires of this AccessTokenResponse.
        :type: str
        """

        self.container['expires'] = expires

    @property
    def access_token(self):
        """
        Gets the access_token of this AccessTokenResponse.

        :return: The access_token of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['access_token']

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this AccessTokenResponse.

        :param access_token: The access_token of this AccessTokenResponse.
        :type: str
        """

        self.container['access_token'] = access_token

    @property
    def issued(self):
        """
        Gets the issued of this AccessTokenResponse.

        :return: The issued of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['issued']

    @issued.setter
    def issued(self, issued):
        """
        Sets the issued of this AccessTokenResponse.

        :param issued: The issued of this AccessTokenResponse.
        :type: str
        """

        self.container['issued'] = issued

    @property
    def client_refresh_token_life_time_in_minutes(self):
        """
        Gets the client_refresh_token_life_time_in_minutes of this AccessTokenResponse.

        :return: The client_refresh_token_life_time_in_minutes of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['client_refresh_token_life_time_in_minutes']

    @client_refresh_token_life_time_in_minutes.setter
    def client_refresh_token_life_time_in_minutes(self, client_refresh_token_life_time_in_minutes):
        """
        Sets the client_refresh_token_life_time_in_minutes of this AccessTokenResponse.

        :param client_refresh_token_life_time_in_minutes: The client_refresh_token_life_time_in_minutes of this AccessTokenResponse.
        :type: str
        """

        self.container['client_refresh_token_life_time_in_minutes'] = client_refresh_token_life_time_in_minutes

    @property
    def expires_in(self):
        """
        Gets the expires_in of this AccessTokenResponse.

        :return: The expires_in of this AccessTokenResponse.
        :rtype: int
        """
        return self.container['expires_in']

    @expires_in.setter
    def expires_in(self, expires_in):
        """
        Sets the expires_in of this AccessTokenResponse.

        :param expires_in: The expires_in of this AccessTokenResponse.
        :type: int
        """

        self.container['expires_in'] = expires_in

    @property
    def token_type(self):
        """
        Gets the token_type of this AccessTokenResponse.

        :return: The token_type of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['token_type']

    @token_type.setter
    def token_type(self, token_type):
        """
        Sets the token_type of this AccessTokenResponse.

        :param token_type: The token_type of this AccessTokenResponse.
        :type: str
        """

        self.container['token_type'] = token_type

    @property
    def client_id(self):
        """
        Gets the client_id of this AccessTokenResponse.

        :return: The client_id of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['client_id']

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this AccessTokenResponse.

        :param client_id: The client_id of this AccessTokenResponse.
        :type: str
        """

        self.container['client_id'] = client_id

    @property
    def refresh_token(self):
        """
        Gets the refresh_token of this AccessTokenResponse.

        :return: The refresh_token of this AccessTokenResponse.
        :rtype: str
        """
        return self.container['refresh_token']

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """
        Sets the refresh_token of this AccessTokenResponse.

        :param refresh_token: The refresh_token of this AccessTokenResponse.
        :type: str
        """

        self.container['refresh_token'] = refresh_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccessTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
